<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/informationFavicon.png" type="image/x-icon">
    <link rel="stylesheet" href="/css/style.css">
    <title>Edit <%= guide.title %></title>
</head>
<body>
    <%- include("partials/navbar") %>
    <div class="main-content">
        <div class="editing">
            <h1>Edit Guide</h1>
            <form action="/guide/<%= guide._id %>/edit" method="POST" id="formContainer" enctype="multipart/form-data">
                <div class="section">
                    <div>
                        <label for="title">Title</label>
                        <input type="text" name="title" id="title" value="<%= guide.title %>" required>
                    </div>
                    <div>
                        <label for="tag">Tag</label>
                        <input type="text" name="tag" id="tag" value="<%= guide.tag %>" required>
                    </div>
                    <div id="addNewSection" class="addNewSection">
                        <% guide.sections.forEach((section, index) => { %>
                            <div class="section" id="section-<%= index %>">
                                <label for="header-<%= index %>">Header</label>
                                <input type="text" name="header[]" id="header-<%= index %>" value="<%= section.header %>" required>
                                
                                <label for="description-<%= index %>">Description</label>
                                <textarea name="description[]" id="description-<%= index %>" class="descriptionArea"><%= section.description %></textarea>
                                
                                <label for="image-<%= index %>">Image</label>
                                <div class="drop-zone">
                                    <% if (section.image) { %>
                                        <div class="drop-zone__thumb" data-label="<%= section.image %>" style="background-image: url('/uploads/<%= section.image %>')"></div>
                                        <input type="hidden" name="existingImage[]" value="<%= section.image %>">
                                    <% } else { %>
                                        <span class="drop-zone__prompt">Drop file here or click to upload</span>
                                    <% } %>
                                    <input type="file" name="image[<%= index %>]" id="image-<%= index %>" class="drop-zone__input">
                                </div>
                                
                                <button type="button" onclick="deleteSection(<%= index %>)" class="deleteSectionButton">Delete Section</button>
                            </div>
                        <% }) %>
                    </div>
                </div>
                <button type="button" onclick="addSection()" class="newSectionButton">Add new section</button>
                <button type="submit">Update Guide</button>
            </form>
        </div>
    </div>

    <script>
        let sectionIndex = <%= guide.sections.length %>;

        function addSection() {
            let addNewSection = document.getElementById("addNewSection");

            const newSectionDiv = document.createElement('div');
            newSectionDiv.className = 'section';
            newSectionDiv.id = `section-${sectionIndex}`;
            newSectionDiv.innerHTML = `
                <label for="header-${sectionIndex}">Header</label>
                <input type="text" name="header[]" id="header-${sectionIndex}" required>
                
                <label for="description-${sectionIndex}">Description</label>
                <textarea name="description[]" id="description-${sectionIndex}" class="descriptionArea"></textarea>
                
                <label for="image-${sectionIndex}">Image</label>
                <div class="drop-zone">
                    <span class="drop-zone__prompt">Drop file here or click to upload</span>
                    <input type="file" name="image[${sectionIndex}]" id="image-${sectionIndex}" class="drop-zone__input">
                </div>
                
                <button type="button" onclick="deleteSection(${sectionIndex})" class="deleteSectionButton">Delete Section</button>
            `;

            addNewSection.appendChild(newSectionDiv);
            initializeDropZone(newSectionDiv.querySelector('.drop-zone'));
            sectionIndex++;
        }

        function deleteSection(index) {
            const sectionToDelete = document.getElementById(`section-${index}`);
            if (sectionToDelete) {
                sectionToDelete.remove();
            }
        }

        // Drag and drop functionality
        document.querySelectorAll(".drop-zone__input").forEach(inputElement => {
            const dropZoneElement = inputElement.closest(".drop-zone");
            initializeDropZone(dropZoneElement);
        });

        function initializeDropZone(dropZoneElement) {
            let inputElement = dropZoneElement.querySelector(".drop-zone__input");

            dropZoneElement.addEventListener("click", e => {
                inputElement.click();
            });

            inputElement.addEventListener("change", e => {
                if (inputElement.files.length) {
                    updateThumbnail(dropZoneElement, inputElement.files[0]);
                }
            });

            dropZoneElement.addEventListener("dragover", e => {
                e.preventDefault();
                dropZoneElement.classList.add("drop-zone--over");
            });

            ["dragleave", "dragend"].forEach(type => {
                dropZoneElement.addEventListener(type, e => {
                    dropZoneElement.classList.remove("drop-zone--over");
                });
            });

            dropZoneElement.addEventListener("drop", e => {
                e.preventDefault();

                if (e.dataTransfer.files.length) {
                    inputElement.files = e.dataTransfer.files;
                    updateThumbnail(dropZoneElement, e.dataTransfer.files[0]);
                }

                dropZoneElement.classList.remove("drop-zone--over");
            });
        }

        function updateThumbnail(dropZoneElement, file) {
            let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");

            // First time - remove the prompt
            if (dropZoneElement.querySelector(".drop-zone__prompt")) {
                dropZoneElement.querySelector(".drop-zone__prompt").remove();
            }

            // First time - there is no thumbnail element, so lets create it
            if (!thumbnailElement) {
                thumbnailElement = document.createElement("div");
                thumbnailElement.classList.add("drop-zone__thumb");
                dropZoneElement.appendChild(thumbnailElement);
            }

            thumbnailElement.dataset.label = file.name;

            // Show thumbnail for image files
            if (file.type.startsWith("image/")) {
                const reader = new FileReader();

                reader.readAsDataURL(file);
                reader.onload = () => {
                    thumbnailElement.style.backgroundImage = `url('${reader.result}')`;
                };
            } else {
                thumbnailElement.style.backgroundImage = null;
            }
        }
    </script>
</body>
</html>
</body>
</html>